package org.lenzi.algorithm.text.dictionary;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.MalformedInputException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.Normalizer;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

/**
 * Prepare the dictionary file used by the spell checker
 * 
 * unsorted_words.txt was generated by gathering all unique words from a www.wiktionary.org data dump.
 * 
 * Example for the english dump:
 * http://dumps.wikimedia.org/enwiktionary/latest/enwiktionary-latest-pages-articles-multistream.xml.bz2
 * 
 * This program normalizes the data in unsorted_words.txt and generates the dictionary.txt file
 * used by the spell checker program.
 * 
 * @author sal
 */
public class DictPrepare {

	public DictPrepare() {
		
	}

	public static void main(String[] args) {
		
		new DictPrepare().doWork();

	}

	private void doWork() {
		
		Charset charset = Charset.forName("ISO8859-1");
		
		System.out.println("Default charset => " + Charset.defaultCharset());
		
		File input  = new File("unsorted_words.txt");
		File output = new File("dictionary.txt");
		
		Path inputPath = Paths.get(input.getAbsolutePath());
		System.out.println("Input => " + inputPath.getParent().getFileName() + File.separator + inputPath.getFileName());
		
		// read words and store in tree set
		BufferedReader reader = null;
		Set<String> wordSet = new TreeSet<String>();
		try {
			reader = Files.newBufferedReader(inputPath, charset);
			String line, normal = null;
			while ((line = reader.readLine()) != null) {
				
				//normal = Normalizer.normalize(line, Normalizer.Form.NFD);
				//normal.replaceAll("[^\\p{ASCII}]", "");
				//normal.replaceAll("\\p{M}", "");
				
				wordSet.add(line); // don't normal
			}
		} catch (MalformedInputException e){
			System.err.println("MalformedInputException. " + e.getMessage());
		} catch (IOException e) {
			System.err.println("IOException. " + e.getMessage());
		} finally{
			try {
				reader.close();
			} catch (IOException e) {

			}
		}
		
		System.out.println("Read " + wordSet.size() + " words.");
		
		// save all words to dictionary.txt file
		PrintWriter printOut = null;
		try {
			printOut = new PrintWriter(output, charset.name());
			for (Iterator<String> itr = wordSet.iterator(); itr.hasNext();){
				printOut.println(itr.next());
			}			
		} catch (FileNotFoundException | UnsupportedEncodingException e) {
			System.err.println("Error writing dictionary file. " + e.getMessage());
		} finally {
			printOut.close();
		}
		
		System.out.println("Finished");
		
	}

}
